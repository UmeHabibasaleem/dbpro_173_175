//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace E_Medicine_Store.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB5Entities5 : DbContext
    {
        public DB5Entities5()
            : base("name=DB5Entities5")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Attendence> Attendences { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Comapny> Comapnies { get; set; }
        public virtual DbSet<MedicalStore> MedicalStores { get; set; }
        public virtual DbSet<Medicine> Medicines { get; set; }
        public virtual DbSet<Salary> Salaries { get; set; }
        public virtual DbSet<SalaryStatu> SalaryStatus { get; set; }
        public virtual DbSet<Salesman> Salesmen { get; set; }
        public virtual DbSet<Sell> Sells { get; set; }
        public virtual DbSet<ShopOwner> ShopOwners { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual ObjectResult<abc_Result> abc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<abc_Result>("abc");
        }
    
        public virtual ObjectResult<Company_Result> Company(Nullable<int> ownerId)
        {
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Company_Result>("Company", ownerIdParameter);
        }
    
        public virtual ObjectResult<CompanyRecord_Result> CompanyRecord(Nullable<int> ownerId)
        {
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyRecord_Result>("CompanyRecord", ownerIdParameter);
        }
    
        public virtual ObjectResult<Attendence_Per_day_Result> Attendence_Per_day(Nullable<System.DateTime> date, Nullable<int> ownerId)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Attendence_Per_day_Result>("Attendence_Per_day", dateParameter, ownerIdParameter);
        }
    
        public virtual ObjectResult<Attendence_Per_Month_Result> Attendence_Per_Month(Nullable<int> month, Nullable<int> year, Nullable<int> ownerId)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Attendence_Per_Month_Result>("Attendence_Per_Month", monthParameter, yearParameter, ownerIdParameter);
        }
    
        public virtual ObjectResult<Medicine_sold_per_DAy_Result> Medicine_sold_per_DAy(Nullable<System.DateTime> date, Nullable<int> ownerid)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var owneridParameter = ownerid.HasValue ?
                new ObjectParameter("Ownerid", ownerid) :
                new ObjectParameter("Ownerid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Medicine_sold_per_DAy_Result>("Medicine_sold_per_DAy", dateParameter, owneridParameter);
        }
    
        public virtual ObjectResult<Medicine_sold_per_Month_Result> Medicine_sold_per_Month(Nullable<int> year, Nullable<int> month, Nullable<int> ownerid)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var owneridParameter = ownerid.HasValue ?
                new ObjectParameter("Ownerid", ownerid) :
                new ObjectParameter("Ownerid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Medicine_sold_per_Month_Result>("Medicine_sold_per_Month", yearParameter, monthParameter, owneridParameter);
        }
    }
}
